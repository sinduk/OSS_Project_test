#require File.dirname(__FILE__) + '/../test_helper'
require 'test_helper'
require 'app/helpers/response_helper'


class ResponseHelperTest < ActiveSupport::TestCase
 include ResponseHelper
 # include all the fixtures
 fixtures :responses
 fixtures :response_maps
 fixtures :questionnaires
 fixtures :questions
 fixtures :question_types
 # set up the variables for the test cases
def setup
# create a new response
  @response1 = responses(:response0)
  # create a new questionnaire
  @questionnaire1 = questionnaires(:questionnaire0)
  # create a new array to review scores
  @review_scores = Array.new
  @questions  = @questionnaire1.questions
  @questions.each{
      | question |
    @review_scores << Score.find_by_response_id_and_question_id(@response.id, question.id)
  }
  @questionType1 = question_types(:Type0)
  @obj1 = ApplicationController.new
  @obj1.extend(ResponseHelper)
  #@obj.extend(ApplicationController)
end

# test case to compare scores
def test_compare_scores
  assert_equal ResponseHelper.compare_scores(@response1,@questionnaire1)  , nil
end

# test case to get the total scores
def test_get_total_scores
  map_class = @response1.map.class
  existing_responses = map_class.get_assessments_for(@response1.map.reviewee)
  total, count = ResponseHelper.get_total_scores(existing_responses,@response1)
  assert_equal total, 0
  assert_equal count, 0
end
# test case to notify the instructor
def test_notify_instructor

  @response2=@response1.map.assignment
  assert_equal ResponseHelper.notify_instructor(@response2,@response1,@questionnaire1,18,1) ,nil
  #assert_equal ResponseHelper.notify_instructor(@response2,@response1,@questionnaire1,18,0) ,<"Date: Sat, 20 Oct 2012 22:37:11 -0400\nFrom: expertiza-support@lists.ncsu.edu\nTo: benedict@graham.biz\nSubject: Expertiza Notification: A review score is outside the acceptable range\nMime-Version: 1.0\nContent-Type: text/html; charset=utf-8\n\nHi Madalyn Keeling,<br/>\n\n<p>\nArchibald Hirthe has just submitted a review of Mrs. Karli Kozey.  The score on this review differs from the\nprevious average score by more than the threshold of 15%. The new score is 50.00%, compared\nto a current average of Inf%.  It might be advisable to look over all the reviews of this work to\ndetermine if any of them are out of line, and if so, to notify the reviewer.\n</p>\n\n<BR/>\nAssignment: Wiki 1\n<BR/>\n\n\n<hr>\n\nThis message has been generated by <A HREF=\"http://expertiza.ncsu.edu\">Expertiza</A><BR/>\nhttp://expertiza.ncsu.edu">

end

# test case for the function, remove empty advice
  def test_remove_empty_advice

    @advices = QuestionAdvice.find_all_by_question_id(1)
    @advices = remove_empty_advice(@advices)
    assert_equal @advices.length, 0

  end
# test case to construct table
  def test_construct_table

  @questionType1 = QuestionType.new
  @questionType1.id = 1
  @questionType1.q_type = "Checkbox"
  @questionType1.parameters = "section::tableTitle::tableHeader1|tableHeader2::1|1|1|1"
  @questionType1.question_id = 1
  table_hash = Hash.new
  table_hash = construct_table(@questionType1.parameters.split("::"))
  assert_equal table_hash.to_s, "table_headerstableHeader1|tableHeader2end_tabletrueend_coltruestart_coltruetable_titletableTitlestart_tabletrue"

  end
  # test case for the function, accordion_title
  def test_get_accordion_title
    #@questionType1 = QuestionType.create(:id =>3,:q_type =>"TextField",:parameters => "section::size::separator1|separator2::1|1", :question_id => 1)
    current_topic = @questionType1.parameters.split("::")

    assert_equal get_accordion_title(current_topic, @questionType1.parameters.split("::")) , nil

  end
end